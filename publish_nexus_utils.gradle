apply plugin: 'maven-publish'

ext["PUBLISH_LPUTILS_VERSION"] = ''
ext["PUBLISH_LPUTILS_GROUP_ID"] = ''
ext["PUBLISH_LPUTILS_ARTIFACT_ID"] = ''
ext["PUBLISH_MEIDA_DESCRIPTION"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["SNAPSHOT_REPOSITORY_URL"] = ''
ext["RELEASE_REPOSITORY_URL"] = ''
// 遍历赋值
File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

def getRepositoryUrl() {
    return !PUBLISH_LPUTILS_VERSION.toUpperCase().contains("SNAPSHOT") ? RELEASE_REPOSITORY_URL : SNAPSHOT_REPOSITORY_URL
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                name = PUBLISH_LPUTILS_ARTIFACT_ID
                allowInsecureProtocol = true
                url = getRepositoryUrl()

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }

            maven {
                // 推送至本地存储库，本机测试的时候可以用
                allowInsecureProtocol = false
                name = 'LocalLpUtils'
                url = uri('../LocalRepo/LpUtils')
            }
        }
        publications {
            release(MavenPublication) {
                println("publish-maven Log-------> PUBLISH_LPUTILS_GROUP_ID: $PUBLISH_LPUTILS_GROUP_ID; PUBLISH_LPUTILS_ARTIFACT_ID: $PUBLISH_LPUTILS_ARTIFACT_ID; PUBLISH_LPUTILS_VERSION: $PUBLISH_LPUTILS_VERSION")

                groupId PUBLISH_LPUTILS_GROUP_ID
                artifactId PUBLISH_LPUTILS_ARTIFACT_ID
                version PUBLISH_LPUTILS_VERSION

                artifact("$buildDir/outputs/aar/lputils-debug.aar")
                artifact androidSourcesJar
                artifact androidJavadocsJar

                pom {
                    packaging 'aar'
                    name = PUBLISH_LPUTILS_ARTIFACT_ID
                    description = PUBLISH_MEIDA_DESCRIPTION
                    url = getRepositoryUrl()
                    licenses {
                        license {
                            //协议类型，一般默认Apache License2.0的话不用改：
                            name = 'The Apache License, Version 4.0'
                            url = 'http://www.apache.org/licenses/LICENSE-4.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'futianyi'
                            name = 'Fu Tianyi'
                            email = 'fu_tianyi@leapmotor.com'
                        }
                    }

                    withXml {
                        def dependenciesNode = asNode().appendNode("dependencies")
                        configurations.implementation.allDependencies.forEach() {
                            Dependency dependency ->
                                if (dependency.version != "unspecified" && dependency.name != "unspecified") {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', dependency.group)
                                    dependencyNode.appendNode('artifactId', dependency.name)
                                    dependencyNode.appendNode('version', dependency.version)
                                }
                        }
                    }
                }
            }
        }
    }
}


//编译groovy代码时采用 UTF-8
tasks.withType(GroovyCompile) {
    groovyOptions.encoding = "MacRoman"
}
//编译JAVA文件时采用UTF-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
//生成文档注释
task androidJavadocs(type: Javadoc) {
    //设置源码所在的位置
    source = android.sourceSets.main.java.srcDirs
}

//将文档打包成jar,生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    //指定文档名称
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

//将源码打包 ，生成sources.jar
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs

    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

//配置需要上传到maven仓库的文件
artifacts {
    //将源码打包进aar,这样使用方可以看到方法注释.
    archives androidSourcesJar
    //将注释打包进aar
    archives androidJavadocsJar
}